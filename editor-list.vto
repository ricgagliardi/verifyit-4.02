{{ set schema = {
		question: {
			label: 'Question',
			select: {
				title: {label: 'Title'},
				topics: {class: 'col-md-2', sql: "group_concat(topic_name, ', ') as topics", label: 'Topics'},
				author_name: {label: 'Author'},
				status_name: {label: 'Status'},
				date_created: {label: 'Created'},
				_asof: {label: 'Updated'},
				difficulty: {label: 'Difficulty'},
				question_id: {hidden: true, key: true}
			},
			from: 'question natural join author natural join topic_question',
			group: 'title, author_name, status_name, date_created, _asof, difficulty, question_id'
		},
		source: {
			label: 'Media Source',
			select: {
				name: {label: 'Name'},
				description: {label: 'Desc'},
				source_id: {hidden: true, key: true}
			},
			from: 'source'
		},
		author: {
			label: 'Author',
			select: {
				author_name: {label: 'Name'},
				author_is_editor: {label: 'Editor?', sql: "iif(author_is_editor, 'Yes', 'No') as author_is_editor"},
				author_is_manager: {label: 'Manager?', sql: "iif(author_is_manager, 'Yes', 'No') as author_is_manager"},
				author_is_active: {label: 'Active?', sql: "iif(author_is_active, 'Yes', 'No')as author_is_active"},
				author_id: {hidden: true, key: true},
			},
			from: 'author',
		},
		status: {
			label: 'Status',
			select: {status_name: {label: 'Name', key: true}},
			from: 'status'
		},
		topic: {
			label: 'Topic',
			select: {
				topic_name: {label: 'Topic', key: true},
				status_name: {label: 'Status'},
			},
			from: 'topic',
		},

		// the rest are not updated yet
		topic_question: {
			allow_read: null,
			allow_write: 'author_is_manager',
			column_list: 'topic_name, title',
			joiner: 'natural join question',
			form_fields: null
		}
	}
}}


{{ set auth = atob(params.auth).split('::') }}
{{ set full_name = auth[0] }}
{{ set passcode = auth[1]}}
{{ set is_valid_passcode = db.prepare(`
	select count(*) as is_valid 
	from passcode 
	where passcode_name = ? 
	and expires > date('now', 'localtime')`).get(passcode).is_valid
}}
{{ set user = db.prepare(`
	select author_name, author_is_editor, author_is_manager
	from author
	where author_name = ?
	and author_is_active`).get(full_name)
}}
{{ set spec = schema[params.list] }}
{{# {{> console.log('spec', spec) }} #}}
{{ set columns = Object.keys(spec.select).filter( k => !spec.select[k].hidden ) }}
{{ set key_field = Object.keys(spec.select).filter( k => spec.select[k].key )[0] || params.list + '_id' }}
{{> console.log('key', key_field, 'columns', columns) }}

{{ set sql = `
	select ${Object.keys(spec.select).map( k => spec.select[k].sql || k).join(', ')}
	from ${spec.from}
	${spec.group ? 'group by ' + spec.group : ''}`
}}
{{> console.log('sql', sql) }}

{{ set data = db.prepare(sql).all() }}

{{ layout "/default.vto" }} 
<main hx-target="main" hx-select="main" hx-swap="outerHTML">
    <style>
        main {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            padding: 20px;
        }

        .table-container {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            padding: 20px;
            margin-top: 20px;
        }
        
        .filter-row input, .filter-row select {
            width: 100%;
            padding: 6px 8px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        
        .filter-row input:focus, .filter-row select:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.15rem rgba(13, 110, 253, 0.25);
            outline: none;
        }
        
        .filter-row td {
            padding: 8px 12px;
            background-color: #f1f3f5;
        }
        
        .clear-filters-cell {
            text-align: right;
            padding: 12px 20px;
        }
        
        #clearFilters, #addNewBtn {
            padding: 5px 12px;
            font-size: 0.85rem;
        }
        
        .table-header {
            background-color: #0d6efd;
            color: white;
        }
        
        .table-title {
            font-weight: 600;
            color: #343a40;
            margin-bottom: 15px;
        }
        
        .table {
            margin-bottom: 0;
        }

        .table-striped > tbody > tr:nth-of-type(odd) > * {
            background-color: rgba(0, 0, 0, 0.02);
        }
        
        .table tbody tr {
            cursor: pointer;
        }
        
        .table tbody tr:hover {
            background-color: rgba(13, 110, 253, 0.08);
        }

        .table-striped > tbody > tr:nth-of-type(odd) > * {
            background-color: rgba(0, 0, 0, 0.02);
        }
        
        .table-hover tbody tr:hover {
            background-color: rgba(13, 110, 253, 0.05);
        }
                
        .search-container {
            margin-bottom: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }
        
        .filter-section-title {
            color: #343a40;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .form-control:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
    </style>
    <div class="container">
				<div class="d-flex justify-content-between align-items-center mb-3">
					<h2 class="table-title m-0">{{ spec.label }}</h2>
					<div>
						<button class="btn btn-secondary btn-sm" 
								hx-get="/editor-edit?fm={{ params.list }}&key=new&auth={{ params.auth }}"
								hx-target="#edit-form"
								hx-swap="innerHTML"
								onclick="htmx.find('#edit-form').showModal()"
						>
							Add new {{ spec.label }}</button>
						<button class="btn btn-primary btn-sm" onclick="location.reload()">Back to menu</button>
					</div>
				</div>
        <div class="table-container">
            <div class="table-responsive">
                <table id="dataTable" class="table table-striped table-hover">
                    <thead class="table-header">
												<tr>
													{{ for col of columns }}
														<th scope="col" class="sortable" data-sort="{{ col }}">{{ spec.select[col].label || col }}</th>
													{{ /for }}
												</tr>
                        <tr class="filter-row">
													{{ for col of columns }}
														<td><input type="text" id="{{ col }}Filter"></td>
													{{ /for }}
                        </tr>
                    </thead>
                    <tbody id="tableBody">
                        <!-- Table data will be inserted here by JavaScript -->
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="6" class="clear-filters-cell">
                                <button id="clearFilters" class="btn btn-outline-secondary btn-sm me-2">Clear Filters</button>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
		<div>
			<dialog id="edit-form" style="max-width: 90%">
			</dialog>
		</div>
    <script>
				htmx.onLoad(function() {
            const jsonData = {{ JSON.stringify(data) }}
            const tableBody = document.getElementById('tableBody');
						tableBody.setAttribute('hx-target', '#edit-form')
						tableBody.setAttribute('hx-swap', 'innerHTML')
						tableBody.setAttribute('onclick', "htmx.find('#edit-form').showModal()")

				{{ for col of columns }}
						const {{ col }}Filter = document.getElementById('{{ col }}Filter')
						if (!{{ col }}Filter) return
				{{ /for }}

            const clearFiltersBtn = document.getElementById('clearFilters');
            const sortableHeaders = document.querySelectorAll('.sortable');
            
            let sortColumn = 'title';
            let sortDirection = 'asc';
            
            // Render table function
            function renderTable(data) {
								{{# console.log('renderTable', data.length) #}}
                tableBody.innerHTML = '';
                
                data.forEach(item => {
                    const row = document.createElement('tr');
										row.setAttribute('hx-get', `/editor-edit?fm={{ params.list }}&key='${item.{{ key_field }} }'&auth={{ params.auth }}`)
              
                    row.innerHTML = `
											{{ for col of columns }}
												<td>${item.{{ col }}}</td>
											{{ /for }}
                    `;
                    
                    tableBody.appendChild(row);
                });
							htmx.process(tableBody)
            }
            
            // Filter and sort data
            function filterAndSortData() {
							{{# console.log('filterAndSortData') #}}
							{{ for col of columns }}
								const {{ col }}Term = {{ col }}Filter.value.toLowerCase()
							{{ /for }}
                
                let filteredData = jsonData.filter(item => {
									{{ for col of columns }}
										const {{ col }}Matches = item.{{ col }}.toLowerCase().includes({{ col }}Term)
									{{ /for }}
									{{ set allMatches = columns.map( n => n + 'Matches').join(' && ') }}
                    return {{ allMatches }}
                });
                // Sort data
                filteredData.sort((a, b) => {
                    let valueA, valueB;
                    
                    switch(sortColumn) {
											{{ for col of columns }}
                        case '{{ col }}':
                            valueA = a.{{ col }}.toLowerCase();
                            valueB = b.{{ col }}.toLowerCase();
                            break;
											{{ /for }}
                        default:
                            valueA = a.{{ columns[0] }}.toLowerCase();
                            valueB = b.{{ columns[0] }}.toLowerCase();
                    }
                    
                    if (valueA < valueB) {
                        return sortDirection === 'asc' ? -1 : 1;
                    }
                    if (valueA > valueB) {
                        return sortDirection === 'asc' ? 1 : -1;
                    }
                    return 0;
                });
                
                renderTable(filteredData);
            }

            // Event listeners
					{{ for col of columns }}
            {{ col }}Filter.addEventListener('input', filterAndSortData);
					{{ /for }}
            
            // Clear filters button
            clearFiltersBtn.addEventListener('click', () => {
							{{ for col of columns }}
								{{ col }}Filter.value = ''
							{{ /for }}
                filterAndSortData();
            });
            
            // Sort header click events
            sortableHeaders.forEach(header => {
                header.addEventListener('click', () => {
                    const newSortColumn = header.getAttribute('data-sort');
                    
                    if (sortColumn === newSortColumn) {
                        // Toggle direction if same column
                        sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
                    } else {
                        // Set new column and default to ascending
                        sortColumn = newSortColumn;
                        sortDirection = 'asc';
                    }
                    
                    // Remove sort indicators from all headers
                    sortableHeaders.forEach(h => {
                        h.textContent = h.textContent.replace(' ↑', '').replace(' ↓', '');
                    });
                    
                    // Add sort indicator to current header
                    header.textContent += sortDirection === 'asc' ? ' ↑' : ' ↓';
                    
                    filterAndSortData();
                });
            });
            // Initial render
            filterAndSortData(); 
        });
    </script>
	<pre>
		list: {{ params.list }}
		name: {{ full_name }}
		is_valid_passcode: {{ is_valid_passcode }}
		is_editor: {{ user.author_is_editor }}
		is_manager: {{ user.author_is_manager }}
		spec: {{ JSON.stringify(spec, null, 2) }}
		data size: {{ data.length }}
	</pre>
</main>
{{ /layout }}

{{# http://localhost:3000/list?list=question&auth=UmljIEdhZ2xpYXJkaTo6RGVudmVy #}}

